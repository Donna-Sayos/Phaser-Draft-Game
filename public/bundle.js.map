{"version":3,"file":"./public/bundle.js","mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;;AAEe;AACf;AACA,gBAAgB,kBAAkB;AAClC;;AAEA;AACA;AACA;AACA,qFAAqF,iCAAiC;AACtH;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,+CAA+C;AAC/C;;AAEA;AACA,4DAA4D,kDAAkD;AAC9G;;AAEA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;AACA,8DAA8D,kBAAkB;AAChF;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,SAAS;;AAET;AACA;AACA,wBAAwB,yBAAyB;AACjD;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,oCAAoC;AACpC;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;;;;;;;;;;;;;;ACxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf;AACA,gBAAgB,oBAAoB;AACpC;;AAEA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qFAAqF,iCAAiC,GAAG;AACzH;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;;AAEA;AACA;;AAEA,wCAAwC;AACxC,yIAAyI;AACzI,4DAA4D,kDAAkD;AAC9G;AACA;AACA;AACA;AACA,mFAAmF;AACnF;AACA;AACA;AACA,uFAAuF;AACvF;AACA;AACA;AACA;AACA,yFAAyF;AACzF;AACA;AACA;;AAEA,mHAAmH;AACnH;AACA;AACA;;AAEA,uFAAuF;AACvF;AACA;AACA;;AAEA;;AAEA,iFAAiF;AACjF,iFAAiF;AACjF,iFAAiF;;AAEjF,oHAAoH;AACpH;AACA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB,mDAAmD;AACnE,gBAAgB,mDAAmD;AACnE,gBAAgB,kDAAkD;AAClE,gBAAgB,mDAAmD;AACnE,gBAAgB,mDAAmD;AACnE,gBAAgB;AAChB;AACA,SAAS;AACT;AACA;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;;AAEA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,kBAAkB;AAChF;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjD;AACA,SAAS;AACT;AACA;AACA;AACA,8DAA8D,mBAAmB;AACjF;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,kEAAkE,gCAAgC;AAClG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,8CAA8C;AAC9C;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;;AAEA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,8CAA8C,gBAAgB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,kCAAkC;AAClC,uGAAuG,yCAAyC;AAChJ,8GAA8G,yCAAyC;;AAEvJ;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACjUe;AACf;AACA,gBAAgB,mBAAmB;AACnC;;AAEA;AACA,qFAAqF,iCAAiC,GAAG;AACzH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,6GAA6G,yCAAyC;;AAEtJ;AACA;AACA;AACA;;AAEA;AACA,mCAAmC,YAAY;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC7De;AACf;AACA,gBAAgB,sBAAsB;AACtC;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa;AACb,SAAS;;AAET;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;;;;;;;;;;;;;;AClCe;AACf;AACA,gBAAgB,kBAAkB;AAClC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qFAAqF,iCAAiC;AACtH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,2BAA2B;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;;AAEA;AACA,0EAA0E;;AAE1E;AACA,wBAAwB,SAAS;AACjC;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;;;;UC7GA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;ACN8C;AACI;AACJ;AACE;AACM;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA,SAAS;AACT,KAAK;AACL;AACA,SAAS,4DAAS;AAClB,SAAS,6DAAU;AACnB,SAAS,8DAAW;AACpB,SAAS,gEAAa;AACtB;AACA;AACA;;AAEA,qC","sources":["webpack://phaser-draft-game/./js/scenes/CaveScene.js","webpack://phaser-draft-game/./js/scenes/DesertScene.js","webpack://phaser-draft-game/./js/scenes/StartScene.js","webpack://phaser-draft-game/./js/scenes/ToBeContinued.js","webpack://phaser-draft-game/./js/scenes/loadScene.js","webpack://phaser-draft-game/webpack/bootstrap","webpack://phaser-draft-game/webpack/runtime/define property getters","webpack://phaser-draft-game/webpack/runtime/hasOwnProperty shorthand","webpack://phaser-draft-game/webpack/runtime/make namespace object","webpack://phaser-draft-game/./js/index.js"],"sourcesContent":["let player;\n// let cursors;\nlet invisibox;\n\nexport default class CaveScene extends Phaser.Scene {\n    constructor () {\n        super({ key: \"CaveScene\" });\n    }\n\n    preload () {\n        this.load.image('background', 'public/assets/bg/goblin-cave.png');\n        this.load.image('box', 'public/assets/objects/nobody.png');\n        this.load.spritesheet('baby', 'public/assets/sprites/mini-naked-baby.png', { frameWidth: 37, frameHeight: 58 });\n    }\n\n    create () {\n        this.cameras.main.setBounds(0, 0, 1024, 2000);\n\n        this.add.image(0, 0, 'background').setOrigin(0);\n\n        player = this.physics.add.sprite(180, 140, 'baby');\n        player.body.setSize(23, 26).setOffset(7.5, 25);\n        // player.setCollideWorldBounds(true);\n        player.body.allowGravity = false;\n        player.setGravity(0, 0);\n        player.setVelocityY(0);\n\n        this.cameras.main.startFollow(player); // .09, .09\n        this.cameras.main.setZoom(2);\n\n        invisibox = this.physics.add.image(155, 915, 'box').setScale(2).refreshBody().setImmovable(true);\n        invisibox.body.setSize(100, 30).setOffset(35, 110); // .setSize adjusts the size of the bounding box; .setOffset adjusts the location of the bounding box;\n        invisibox.body.allowGravity = false; \n\n        this.cursors = this.input.keyboard.createCursorKeys();\n\n        this.anims.create({\n            key: 'down',\n            frames: this.anims.generateFrameNumbers('baby', {\n                frames: [0, 1, 2, 3]\n            }),\n            frameRate: 10,\n            repeat: -1\n        });\n\n        this.anims.create({\n            key: 'left',\n            frames: this.anims.generateFrameNumbers('baby', { start: 4, end: 7 }),\n            frameRate: 10, // The frame rate of playback in frames per second (default 24 if duration is null);\n            repeat: -1\n        });\n    \n        this.anims.create({\n            key: 'right',\n            frames: this.anims.generateFrameNumbers('baby', {\n                frames: [8, 9, 10, 11]\n            }),\n            frameRate: 20,\n            repeat: -1\n        });\n\n        this.anims.create({\n            key: 'walkup',\n            frames: this.anims.generateFrameNumbers('baby', {\n                frames: [12, 13, 14, 15]\n            }),\n            frameRate: 20,\n            repeat: -1\n        });\n\n        this.anims.create({\n            key: 'turn',\n            frames: [ { key: 'baby', frames: 0 } ],\n            frameRate: 20\n        });\n\n        this.physics.add.collider(player, invisibox);\n    }\n\n    update () {\n        \n        if (this.cursors.left.isDown) {\n            player.setVelocityX(-160);\n            // player.setAngle(-90);\n            player.anims.play('left', true);\n        } else if (this.cursors.right.isDown) {\n            player.setVelocityX(160);\n            // player.setAngle(90); // rotates the player 90 when walking right;\n            player.anims.play('right', true);\n        } else if (this.cursors.up.isDown) {\n            player.setVelocityY(-110);\n            player.anims.play('walkup', true);\n        } else if (this.cursors.down.isDown) {\n            player.setVelocityY(180);\n            player.anims.play('down', true);\n        } else {\n            player.setVelocityX(0);\n            player.anims.play('turn');\n        }\n    \n        // if (cursors.up.isDown && player.body.touching.down) {\n        //     player.setAngle(0).setVelocityY(-360); // .setAngle(-180);\n        // }\n    }\n};","let player;\nlet iceCreams;\nlet poops;\nlet portals;\nlet platform1;\nlet platform2;\nlet movingPlatform1;\nlet movingPlatform2;\nlet movingPlatform3;\nlet movingPlatform4;\nlet stoneBlock;\nlet stoneBlockA;\nlet cursors;\nlet gameOver = false;\nlet scoreText;\nconst gameState = {\n    score: 0\n}\n\nexport default class DesertScene extends Phaser.Scene {\n    constructor () {\n        super({ key: \"DesertScene\" });\n    }\n\n    preload () { // where to load images or sounds;\n        this.load.image('desert', 'public/assets/bg/desert.png');\n        this.load.image('ground', 'public/assets/tiles/desert-platform.png');\n        this.load.image('mini', 'public/assets/tiles/mini-platform.png');\n        this.load.image('iceCream', 'public/assets/objects/iceCream.png');\n        this.load.image('poop', '/public/assets/objects/poop.png');\n        this.load.image('stone-block', 'public/assets/objects/StoneBlock.png');\n        this.load.image('portal', 'public/assets/objects/portal.png');\n        this.load.spritesheet('baby', 'public/assets/sprites/mini-naked-baby.png', { frameWidth: 37, frameHeight: 58 }); // 57, 70\n        this.load.audio('pickup-audio', 'public/assets/audio/pickup.mp3');\n        this.load.audio('explosion-audio', 'public/assets/audio/explosion.mp3');\n        this.load.audio('portal-audio', 'public/assets/audio/portal-audio.mp3');\n    }\n\n    create () { // where to define objects;\n        this.cameras.main.setBounds(0, 0, 1024, 2000);\n\n        //  A simple background for the game\n        this.add.image(0, 0, 'desert').setOrigin(0).setScrollFactor(1);\n\n        // adds the floor for the game; here we create the ground. Scale it to fit the width of the game \n        platform1 = this.physics.add.image(530, this.game.renderer.height + 40 , 'ground').setScale(2).refreshBody().setImmovable(true); // floor;\n        platform1.body.setSize(400, 30).setOffset(35, 110); // .setSize adjusts the size of the bounding box; .setOffset adjusts the location of the bounding box;\n        platform1.body.allowGravity = false;\n    \n    \n        // adds some ledges\n        platform2 = this.physics.add.image(100, 350, 'ground').setImmovable(true); // 2nd ledge;\n        platform2.body.setSize(275, 30).setOffset(160, 110);\n        platform2.body.allowGravity = false;\n    \n        movingPlatform1 = this.physics.add.image(650, 470, 'mini').setImmovable(true); // 3rd\n        movingPlatform1.body.setSize(150, 40).setOffset(150, 194);\n        movingPlatform1.body.allowGravity = false;\n        movingPlatform1.setVelocityX(50);\n    \n        movingPlatform2 = this.physics.add.image(780, 220, 'ground').setImmovable(true); // 1st ledge;\n        movingPlatform2.body.setSize(300, 30).setOffset(24, 110);\n        movingPlatform2.body.allowGravity = false;\n        movingPlatform2.setVelocityY(50);\n\n        movingPlatform3 = this.physics.add.image(650, this.game.renderer.height - 250, 'mini').setImmovable(true); // bot mini ledge;\n        movingPlatform3.body.setSize(150, 40).setOffset(150, 194);\n        movingPlatform3.body.allowGravity = false;\n        movingPlatform3.setVelocityX(50);\n\n        movingPlatform4 = this.physics.add.image(500, 800, 'mini').setImmovable(true); // 4th ledge;\n        movingPlatform4.body.setSize(150, 30).setOffset(150, 194);\n        movingPlatform4.body.allowGravity = false;\n        movingPlatform4.setVelocityY(50);\n\n        stoneBlockA = this.physics.add.staticGroup();\n\n        stoneBlockA.create(650, this.game.renderer.height - 150, 'stone-block'); // mid;\n        stoneBlockA.create(730, this.game.renderer.height - 400, 'stone-block'); // right;\n        stoneBlockA.create(150, this.game.renderer.height - 300, 'stone-block'); // left;\n\n        stoneBlock = this.physics.add.image(70, this.game.renderer.height - 150, 'stone-block').setImmovable(true); // moving stone block;\n        stoneBlock.body.allowGravity = false;\n        stoneBlock.setVelocity(100, -100);\n\n        this.tweens.timeline({\n            targets: stoneBlock.body.velocity,\n            loop: -1,\n            tweens: [\n              { x:    0, y: -180, duration: 2000, ease: 'Stepped' },\n              { x:    0, y:    0, duration: 1000, ease: 'Stepped' },\n              { x:  150, y:  80, duration: 4000, ease: 'Stepped' },\n              { x:    0, y: -180, duration: 2000, ease: 'Stepped' },\n              { x:    0, y:    0, duration: 1000, ease: 'Stepped' },\n              { x: -150, y:  100, duration: 4000, ease: 'Stepped' }\n            ]\n        });\n    \n        // The player and its settings\n        gameState.player = this.physics.add.sprite(20, 350, 'baby');\n        gameState.player.body.setSize(23, 26).setOffset(7.5, 25); // 30, 35 || 13, 28\n    \n        //  gameState.Player physics properties. Give the little guy a slight bounce.\n        gameState.player.setBounce(0.5);\n        gameState.player.setCollideWorldBounds(true);\n\n        // to have the camera focus on the player;\n        this.cameras.main.startFollow(gameState.player); // .09, .09\n        this.cameras.main.setZoom(1.2);\n        this.cameras.main.roundPixels = true;\n    \n        // gameState.player animations, turning, walking left and walking right.\n        this.anims.create({\n            key: 'left',\n            frames: this.anims.generateFrameNumbers('baby', { start: 4, end: 7 }),\n            frameRate: 10, // The frame rate of playback in frames per second (default 24 if duration is null);\n            repeat: -1\n        });\n    \n        this.anims.create({\n            key: 'turn',\n            frames: [ { key: 'baby', frames: 0 } ],\n            frameRate: 20\n        });\n    \n        this.anims.create({\n            key: 'right',\n            frames: this.anims.generateFrameNumbers('baby', { start: 8, end: 11 }),\n            frameRate: 10,\n            repeat: -1\n        });\n\n        // sounds\n        this.pickUpSound = this.sound.add(\"pickup-audio\");\n        this.explosionSound = this.sound.add(\"explosion-audio\");\n        this.portalSound = this.sound.add(\"portal-audio\");\n    \n        //  Input Events\n        cursors = this.input.keyboard.createCursorKeys();\n    \n        //  Some iceCreams to collect, 15 in total, evenly spaced 70 pixels apart along the x axis\n        iceCreams = this.physics.add.group({\n            key: 'iceCream',\n            repeat: 14,\n            setXY: { x: 12, y: 0, stepX: 55 }\n        });\n        \n    \n        iceCreams.children.iterate(function (child) {\n    \n            //  Give each iceCream a slightly different bounce\n            child.setBounceY(Phaser.Math.FloatBetween(0.4, 0.6)); \n    \n        });\n    \n        poops = this.physics.add.group();\n        portals = this.physics.add.group();\n    \n        //  The score\n        gameState.scoreText = this.add.text(14, 14, 'score: 0', { fontSize: '40px', fill: '#000' });\n           \n        //  Collide the gameState.player and the iceCreams with the platforms\n        this.physics.add.collider(gameState.player, platform1);\n        this.physics.add.collider(gameState.player, platform2);\n        this.physics.add.collider(gameState.player, stoneBlock);\n        this.physics.add.collider(gameState.player, stoneBlockA);\n        this.physics.add.collider(gameState.player, movingPlatform1);\n        this.physics.add.collider(gameState.player, movingPlatform2);\n        this.physics.add.collider(gameState.player, movingPlatform3);\n        this.physics.add.collider(gameState.player, movingPlatform4);\n        \n        this.physics.add.collider(iceCreams, platform1);\n        this.physics.add.collider(iceCreams, platform2);\n        this.physics.add.collider(iceCreams, stoneBlock);\n        this.physics.add.collider(iceCreams, stoneBlockA);\n        this.physics.add.collider(iceCreams, movingPlatform1);\n        this.physics.add.collider(iceCreams, movingPlatform2);\n        this.physics.add.collider(iceCreams, movingPlatform3);\n        this.physics.add.collider(iceCreams, movingPlatform4);\n\n        this.physics.add.collider(portals, platform1);\n        this.physics.add.collider(portals, platform2);\n        this.physics.add.collider(portals, stoneBlock);\n        this.physics.add.collider(portals, stoneBlockA);\n        this.physics.add.collider(portals, movingPlatform1);\n        this.physics.add.collider(portals, movingPlatform2);\n        this.physics.add.collider(portals, movingPlatform3);\n        this.physics.add.collider(portals, movingPlatform4);\n    \n        this.physics.add.collider(poops, platform1);\n        this.physics.add.collider(poops, platform2);\n        this.physics.add.collider(poops, stoneBlock);\n        this.physics.add.collider(poops, stoneBlockA);\n        this.physics.add.collider(poops, portals);\n        this.physics.add.collider(poops, movingPlatform1);\n        this.physics.add.collider(poops, movingPlatform2);\n        this.physics.add.collider(poops, movingPlatform3);\n        this.physics.add.collider(poops, movingPlatform4);\n            \n        //  Checks to see if the gameState.player overlaps with any of the iceCreams, if he does call the collecticeCream function\n        this.physics.add.overlap(gameState.player, iceCreams, this.collecticeCream, null, this);\n        this.physics.add.collider(gameState.player, poops, this.hitpoop, null, this);\n        this.physics.add.collider(gameState.player, portals, this.hitPortal, null, this);\n    }\n\n    update () { // where the loop goes; \n        if (cursors.left.isDown) {\n            gameState.player.setVelocityX(-160);\n            // gameState.player.setAngle(-90);\n    \n            gameState.player.anims.play('left', true);\n        } else if (cursors.right.isDown) {\n            gameState.player.setVelocityX(160);\n            // gameState.player.setAngle(90); // rotates the player 90 when walking right;\n    \n            gameState.player.anims.play('right', true);\n        } else {\n            gameState.player.setVelocityX(0);\n    \n            gameState.player.anims.play('turn');\n        }\n    \n        if (cursors.up.isDown && gameState.player.body.touching.down) {\n            gameState.player.setAngle(0).setVelocityY(-360); // .setAngle(-180);\n        }\n    \n        if (movingPlatform1.x >= 700) {\n            movingPlatform1.setVelocityX(-100); \n        } else if (movingPlatform1.x <= 300) {\n            movingPlatform1.setVelocityX(100);\n        }\n    \n        if (movingPlatform2.y >= 300) {\n            movingPlatform2.setVelocityY(-50); \n        } else if (movingPlatform2.y <= 100) {\n            movingPlatform2.setVelocityY(50); \n        }\n\n        if (movingPlatform3.x >= 700) {\n            movingPlatform3.setVelocityX(-100); \n        } else if (movingPlatform3.x <= 300) {\n            movingPlatform3.setVelocityX(100);\n        }\n\n        if (movingPlatform4.y >= 800) {\n            movingPlatform4.setVelocityY(-90); \n        } else if (movingPlatform4.y <= 550) {\n            movingPlatform4.setVelocityY(50); \n        }\n\n        if (stoneBlock.y >= 300) {\n            stoneBlock.setVelocityY(-60); \n        } else if (stoneBlock.y <= 200) {\n            stoneBlock.setVelocityY(60); \n        }\n    }\n\n    collecticeCream = (player, iceCream) => {\n        iceCream.disableBody(true, true);\n\n        this.pickUpSound.play();\n    \n        //  Add and update the score\n        gameState.score += 10;\n        gameState.scoreText.setText(`score: ${gameState.score}`);\n    \n        if (iceCreams.countActive(true) === 5) {\n            //  A new batch of iceCreams to collect\n            iceCreams.children.iterate(function (child) {\n    \n                child.enableBody(true, child.x, 0, true, true);\n    \n            });\n            let x = (player.x < 400) ? Phaser.Math.Between(400, 800) : Phaser.Math.Between(0, 400);\n    \n            let poop = poops.create(x, 20, 'poop'); \n            poop.setBounce(1);\n            poop.setSize(25, 23).setOffset(12, 15);\n            poop.setCollideWorldBounds(true);\n            poop.setVelocity(Phaser.Math.Between(-200, 200), 20);\n            poop.allowGravity = false;  \n        } else {\n            if (gameState.score === 10) {\n\n                let x = (player.x < 400) ? Phaser.Math.Between(400, 800) : Phaser.Math.Between(0, 400);\n\n                let portal = portals.create(x, 30, 'portal');\n                portal.setSize(100, 100).setOffset(17, 19);\n                portal.setVelocity(Phaser.Math.Between(-200, 200), 20);\n                portal.setCollideWorldBounds(true);\n                portal.allowGravity = false;\n            }\n        }\n    }\n\n    hitPortal = (player, portal) => {\n        this.portalSound.play();\n        player.setTint(0x00ff00);\n        this.scene.start('ToBeContinued');\n\n        player.setScale\n    }\n\n    hitpoop = (player, poop) => {\n        this.explosionSound.play();\n\n        this.physics.pause();\n    \n        player.setTint(0xff0000); // gives the gameState.player a red tint when hit;\n        this.add.text(this.game.renderer.width / 2.5, this.game.renderer.height * 0.20, 'Game Over', { font: '30px monospace', fill: '#000000' });\n        this.add.text(this.game.renderer.width / 2.5, this.game.renderer.height * 0.40, 'Click to restart', { font: '20px monospace', fill: '#000000' });\n\n        this.input.on(\"pointerup\", () => {\n            gameState.score = 0;\n            this.scene.restart();\n        });\n\n        player.anims.play('turn');\n    \n        gameOver = true;\n    }\n};","export default class StartScene extends Phaser.Scene {\n    constructor () {\n        super({ key: \"StartScene\" });\n    }\n\n    preload () {\n        this.load.spritesheet('baby', 'public/assets/sprites/mini-naked-baby.png', { frameWidth: 37, frameHeight: 58 }); // 57, 65\n        this.load.image('background', 'public/assets/bg/desert.png');\n        this.load.image('play-button', 'public/assets/objects/play_button.png');\n        this.load.audio('music', 'public/assets/audio/cave.mp3');\n    }\n\n    onClicked = () => {\n        this.scene.start(\"DesertScene\");\n    }\n\n    create () {\n        // to have a fade effect when entering the scene;\n        this.cameras.main.fadeFrom(2000, Phaser.Math.Between(50, 255), Phaser.Math.Between(50, 255), Phaser.Math.Between(50, 255), Phaser.Math.Between(50, 255));\n\n        this.add.image(0, 0, 'background').setOrigin(0);\n\n        this.add.text(this.game.renderer.width / 3.7, this.game.renderer.height * 0.20, 'Play with me 😏', { font: '50px monospace', fill: '#ffffff' });\n\n        let player = this.physics.add.sprite(150, 350, 'baby').setCollideWorldBounds(true);\n        player.body.allowGravity = false;\n        player.setScale(1.5);\n        player.setVisible(false);\n\n        this.sound.pauseOnBlur = false;\n        this.sound.play('music', { loop: true });\n\n        this.anims.create({\n            key: 'walk',\n            framRate: 4,\n            repeat: -1, // repeat forever;\n            frames: this.anims.generateFrameNumbers('baby', {\n                frames: [0, 1, 2, 3]\n            })\n        });\n\n        let playButton = this.add.image(this.game.renderer.width / 2, this.game.renderer.height / 2, 'play-button').setDepth(1);\n        playButton.setInteractive();\n\n        playButton.on(\"pointerover\", () => {\n            player.setVisible(true);\n            player.play(\"walk\");\n            player.x = playButton.x - playButton.width;\n            player.y = playButton.y;\n        })\n        playButton.on(\"pointerup\", this.onClicked, this);\n    }\n};\n\n/* \n    PointerEvents:\n\n    pointerover - hovering\n    pointerout - not hovering\n    pointerup - click and release\n    pointerdown - just click\n*/","export default class ToBeContinued extends Phaser.Scene {\n    constructor () {\n        super({ key: \"ToBeContinued\" });\n    }\n\n    preload () {\n        this.load.image('incomplete', 'public/assets/bg/thanks.jpg');\n        this.load.image('troll', 'public/assets/objects/troll.png');\n    }\n\n    create () {\n        \n        this.cameras.main.setBounds(0, 0, 1024, 2000);\n        let bg = this.add.image(10, 34, 'incomplete').setOrigin(0);\n        this.cameras.main.startFollow(bg);\n        this.cameras.main.setZoom(2);\n        this.cameras.main.roundPixels = true;\n\n        setTimeout(() => {\n            let trollFace = this.physics.add.image(0, 0, 'troll').setOrigin(0);\n            trollFace.setCollideWorldBounds(true);\n            trollFace.body.allowGravity = false;\n\n            setTimeout(() => {\n                this.scene.start(\"StartScene\");\n            }, 2000);\n        }, 2000);\n\n        // this.keys = this.input.keyboard.addKeys({\n        //     s:  Phaser.Input.Keyboard.KeyCodes.S,\n        //     d:  Phaser.Input.Keyboard.KeyCodes.D,\n        //     w:  Phaser.Input.Keyboard.KeyCodes.W\n        // });\n    }\n};","export default class LoadScene extends Phaser.Scene {\n    constructor () {\n        super({ key: \"loadScene\" });\n    }\n\n    loadAudio = () => {\n        this.load.setPath(\"public/assets/audio\");\n    }\n\n    loadBg = () => {\n        this.load.setPath(\"public/assets/bg\");\n    }\n\n    loadObjects = () => {\n        this.load.setPath(\"public/assets/objects\");\n    }\n\n    preload () {\n        this.load.spritesheet('baby', 'public/assets/sprites/mini-naked-baby.png', { frameWidth: 37, frameHeight: 58 });\n        this.load.image('ground', 'public/assets/tiles/desert-platform.png');\n        this.load.image('lol', 'public/assets/objects/lol.png');\n\n        this.loadAudio();\n        this.loadBg();\n        this.loadObjects();\n\n        let width = this.cameras.main.width;\n        let height = this.cameras.main.height;\n        \n        let loadingText = this.make.text({\n            x: width / 2,\n            y: height /2 -10,\n            text: 'Loading...',\n            style: {\n                font: '30px monospace',\n                fill: '#ffffff'\n            }\n        });\n        loadingText.setOrigin(0.5, 0.5);\n\n        let percent = this.make.text({\n            x: width / 2,\n            y: height / 2 - 5,\n            text: '0%',\n            style: 'monospace',\n            fill: '#ffffff'\n        });\n        percent.setOrigin(0.5, -2);\n        percent.depth = 1; // allows the percent to appear on top of the loading bar;\n\n        let assetsText = this.make.text({\n            x: width / 2,\n            y: height / 2 + 50,\n            text: '',\n            style: {\n                font: '20px monospace',\n                fill: \"#ffffff\"\n            }\n        });\n        assetsText.setOrigin(0.5, -2);\n\n        let loadingBar = this.add.graphics();\n        let loadingBox = this.add.graphics();\n\n        loadingBox.fillStyle(0x222222, 0.8);\n        loadingBox.fillRect(140, this.game.renderer.height / 2, 520, 70); // .fillRect(x, y, width, height);\n\n        // to make the loading bar load slower;\n        for (let i = 0; i < 500; i++) {\n            this.load.spritesheet(\"butt\" + i, \"public/assets/objects/butt.png\");\n        };\n\n        this.load.on(\"progress\", (num) => {\n            loadingBar.clear();\n            loadingBar.fillStyle(0xffffff, 1);\n            loadingBar.fillRect(150, this.game.renderer.height / 1.97, 500 * num, 60);\n\n            percent.setText(parseInt(num * 100) + '%');\n        });\n\n        this.load.on(\"fileprogress\", (file) => {\n            assetsText.setText('Loading asset: ' + file.key) // file.src - will only show the source of the file being loaded;\n        })\n\n        this.load.on(\"complete\", () => {\n            console.log('Loading comple...');\n\n            loadingBar.destroy();\n            loadingBox.destroy();\n            loadingText.destroy();\n            percent.destroy();\n            assetsText.destroy();\n        })\n    }\n\n    create () {\n        this.add.image(400, 550, 'lol');\n        setTimeout(() => {\n            this.scene.start(\"StartScene\");\n        }, 800);\n    }\n};\n\n/*\n    Loader Events:\n\n    complete - when done loading everything\n    progress - loader number progress in decimal\n    fileprogress - A reference to the File which errored during load\n*/","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import CaveScene from \"./scenes/CaveScene.js\";\nimport DesertScene from \"./scenes/DesertScene.js\";\nimport LoadScene from \"./scenes/loadScene.js\";\nimport StartScene from \"./scenes/StartScene.js\";\nimport ToBeContinued from \"./scenes/ToBeContinued.js\";\n\nconst config = {\n    type: Phaser.AUTO,\n    pixelArt: true,\n    title: 'Survive Deeznuts',\n    scale: {\n        parent: 'game-container',\n        autoCenter: Phaser.Scale.CENTER_BOTH\n    },\n    width: 800, \n    height: 1120, \n    physics: {\n        default: 'arcade',\n        arcade: {\n            gravity: { y: 300 }, \n            debug: false,\n        },\n    },\n    scene: [\n         LoadScene,\n         StartScene,\n         DesertScene,\n         ToBeContinued,\n        //  CaveScene\n    ]\n};\n\nconst game = new Phaser.Game(config);"],"names":[],"sourceRoot":""}